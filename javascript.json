[
  {
    "id": 1,
    "name": "Add Two Numbers",
    "difficulty": "Easy",
    "description": "Write a function named <code>add</code> that takes two numbers as arguments and returns their sum.",
    "hint": "Use the addition operator to sum the two numbers and return the result.",
    "functionName": "add",
    "boilerplate": "// Write your function here\nfunction add(a, b) {\n  // Your code here\n}",
    "testCases": [
      { "args": [2, 3], "expected": 5 },
      { "args": [-1, 1], "expected": 0 },
      { "args": [0, 0], "expected": 0 },
      { "args": [100, 200], "expected": 300 },
      { "args": [-50, -50], "expected": -100 }
    ]
  },
  {
    "id": 2,
    "name": "Multiply Two Numbers",
    "difficulty": "Easy",
    "description": "Write a function named <code>multiply</code> that takes two numbers as arguments and returns their product.",
    "hint": "Use the multiplication operator to multiply the two numbers and return the result.",
    "functionName": "multiply",
    "boilerplate": "// Write your function here\nfunction multiply(a, b) {\n  // Your code here\n}",
    "testCases": [
      { "args": [2, 3], "expected": 6 },
      { "args": [-1, 1], "expected": -1 },
      { "args": [0, 5], "expected": 0 },
      { "args": [7, 8], "expected": 56 },
      { "args": [-10, -10], "expected": 100 }
    ]
  },
  {
    "id": 3,
    "name": "Find the Maximum of Three Numbers",
    "difficulty": "Easy",
    "description": "Write a function named <code>findMax</code> that takes three numbers as arguments and returns the largest of them.",
    "hint": "Compare the three numbers using conditional statements and determine which one is the largest.",
    "functionName": "findMax",
    "boilerplate": "// Write your function here\nfunction findMax(a, b, c) {\n  // Your code here\n}",
    "testCases": [
      { "args": [1, 2, 3], "expected": 3 },
      { "args": [-1, -2, -3], "expected": -1 },
      { "args": [5, 5, 5], "expected": 5 },
      { "args": [10, 20, 15], "expected": 20 },
      { "args": [100, 50, 100], "expected": 100 }
    ]
  },
  {
    "id": 4,
    "name": "Reverse a String",
    "difficulty": "Easy",
    "description": "Write a function named <code>reverseString</code> that takes a string as an argument and returns the reversed version of that string.",
    "hint": "Use built-in string and array methods to reverse the string.",
    "functionName": "reverseString",
    "boilerplate": "// Write your function here\nfunction reverseString(str) {\n  // Your code here\n}",
    "testCases": [
      { "args": ["hello"], "expected": "olleh" },
      { "args": ["OpenAI"], "expected": "IAnepO" },
      { "args": ["12345"], "expected": "54321" },
      { "args": [""], "expected": "" },
      { "args": ["A"], "expected": "A" }
    ]
  },
  {
    "id": 5,
    "name": "Sum of Array",
    "difficulty": "Easy",
    "description": "Write a function named <code>sumArray</code> that takes an array of numbers as an argument and returns the sum of all the numbers in the array.",
    "hint": "Use a loop or the reduce method to accumulate the sum.",
    "functionName": "sumArray",
    "boilerplate": "// Write your function here\nfunction sumArray(arr) {\n  // Your code here\n}",
    "testCases": [
      { "args": [[1, 2, 3, 4, 5]], "expected": 15 },
      { "args": [[-1, -2, -3, -4]], "expected": -10 },
      { "args": [[10, 20, 30]], "expected": 60 },
      { "args": [[]], "expected": 0 },
      { "args": [[100]], "expected": 100 }
    ]
  },
  {
    "id": 6,
    "name": "Find Even Numbers",
    "difficulty": "Easy",
    "description": "Write a function named <code>findEvens</code> that takes an array of numbers and returns a new array containing only the even numbers.",
    "hint": "Use the filter method to select even numbers.",
    "functionName": "findEvens",
    "boilerplate": "// Write your function here\nfunction findEvens(arr) {\n  // Your code here\n}",
    "testCases": [
      { "args": [[1, 2, 3, 4, 5, 6]], "expected": [2, 4, 6] },
      { "args": [[7, 9, 11]], "expected": [] },
      { "args": [[10, 15, 20, 25]], "expected": [10, 20] },
      { "args": [[]], "expected": [] },
      { "args": [[0, -2, -3, -4]], "expected": [0, -2, -4] }
    ]
  },
  {
    "id": 7,
    "name": "Capitalize Words",
    "difficulty": "Easy",
    "description": "Write a function named <code>capitalizeWords</code> that takes a string and returns a new string with the first letter of each word capitalized.",
    "hint": "Split the string into words, capitalize the first letter of each, and join them back together.",
    "functionName": "capitalizeWords",
    "boilerplate": "// Write your function here\nfunction capitalizeWords(str) {\n  // Your code here\n}",
    "testCases": [
      { "args": ["hello world"], "expected": "Hello World" },
      { "args": ["javaScript is fun"], "expected": "JavaScript Is Fun" },
      { "args": [""], "expected": "" },
      { "args": ["a quick brown fox"], "expected": "A Quick Brown Fox" },
      { "args": ["123abc 456def"], "expected": "123abc 456def" }
    ]
  },
  {
    "id": 8,
    "name": "Count Vowels",
    "difficulty": "Medium",
    "description": "Write a function named <code>countVowels</code> that takes a string and returns the number of vowels (a, e, i, o, u) in the string.",
    "hint": "Iterate through the string and count the vowels using a regular expression or conditional statements.",
    "functionName": "countVowels",
    "boilerplate": "// Write your function here\nfunction countVowels(str) {\n  // Your code here\n}",
    "testCases": [
      { "args": ["hello"], "expected": 2 },
      { "args": ["OpenAI"], "expected": 4 },
      { "args": ["xyz"], "expected": 0 },
      { "args": [""], "expected": 0 },
      { "args": ["AEIOUaeiou"], "expected": 10 }
    ]
  },
  {
    "id": 9,
    "name": "Check Palindrome",
    "difficulty": "Medium",
    "description": "Write a function named <code>isPalindrome</code> that takes a string and returns <code>true</code> if the string is a palindrome (reads the same backward as forward), and <code>false</code> otherwise.",
    "hint": "Compare the string to its reversed version.",
    "functionName": "isPalindrome",
    "boilerplate": "// Write your function here\nfunction isPalindrome(str) {\n  // Your code here\n}",
    "testCases": [
      { "args": ["madam"], "expected": true },
      { "args": ["racecar"], "expected": true },
      { "args": ["hello"], "expected": false },
      { "args": [""], "expected": true },
      { "args": ["A man a plan a canal Panama"], "expected": false }
    ]
  },
  {
    "id": 10,
    "name": "Find Factorial",
    "difficulty": "Medium",
    "description": "Write a function named <code>factorial</code> that takes a non-negative integer and returns its factorial.",
    "hint": "Use a loop or recursion to calculate the factorial.",
    "functionName": "factorial",
    "boilerplate": "// Write your function here\nfunction factorial(n) {\n  // Your code here\n}",
    "testCases": [
      { "args": [5], "expected": 120 },
      { "args": [0], "expected": 1 },
      { "args": [3], "expected": 6 },
      { "args": [1], "expected": 1 },
      { "args": [10], "expected": 3628800 }
    ]
  },
  {
    "id": 11,
    "name": "Fibonacci Sequence",
    "difficulty": "Medium",
    "description": "Write a function named <code>fibonacci</code> that takes a number <code>n</code> and returns the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.",
    "hint": "Use recursion or iteration to calculate the Fibonacci number.",
    "functionName": "fibonacci",
    "boilerplate": "// Write your function here\nfunction fibonacci(n) {\n  // Your code here\n}",
    "testCases": [
      { "args": [0], "expected": 0 },
      { "args": [1], "expected": 1 },
      { "args": [5], "expected": 5 },
      { "args": [10], "expected": 55 },
      { "args": [15], "expected": 610 }
    ]
  },
  {
    "id": 12,
    "name": "Merge Sorted Arrays",
    "difficulty": "Medium",
    "description": "Write a function named <code>mergeSorted</code> that takes two sorted arrays and returns a single sorted array containing all elements from both input arrays.",
    "hint": "Use two pointers to traverse both arrays and merge them in order.",
    "functionName": "mergeSorted",
    "boilerplate": "// Write your function here\nfunction mergeSorted(arr1, arr2) {\n  // Your code here\n}",
    "testCases": [
      {
        "args": [
          [1, 3, 5],
          [2, 4, 6]
        ],
        "expected": [1, 2, 3, 4, 5, 6]
      },
      {
        "args": [
          [0, 10, 20],
          [5, 15, 25]
        ],
        "expected": [0, 5, 10, 15, 20, 25]
      },
      { "args": [[], [1, 2, 3]], "expected": [1, 2, 3] },
      {
        "args": [
          [-5, -3, -1],
          [-4, -2, 0]
        ],
        "expected": [-5, -4, -3, -2, -1, 0]
      },
      { "args": [[1, 2, 3], []], "expected": [1, 2, 3] }
    ]
  },
  {
    "id": 13,
    "name": "Remove Duplicates",
    "difficulty": "Medium",
    "description": "Write a function named <code>removeDuplicates</code> that takes an array and returns a new array with all duplicate elements removed.",
    "hint": "Use a Set or filter method to eliminate duplicates.",
    "functionName": "removeDuplicates",
    "boilerplate": "// Write your function here\nfunction removeDuplicates(arr) {\n  // Your code here\n}",
    "testCases": [
      { "args": [[1, 2, 2, 3, 4, 4, 5]], "expected": [1, 2, 3, 4, 5] },
      { "args": [["a", "b", "a", "c", "b"]], "expected": ["a", "b", "c"] },
      { "args": [[true, false, true, true]], "expected": [true, false] },
      { "args": [[], []], "expected": [] },
      { "args": [[1, 1, 1, 1, 1]], "expected": [1] }
    ]
  },
  {
    "id": 14,
    "name": "Longest Common Prefix",
    "difficulty": "Medium",
    "description": "Write a function named <code>longestCommonPrefix</code> that takes an array of strings and returns the longest common prefix string among them. If there is no common prefix, return an empty string.",
    "hint": "Compare characters of each string sequentially until a mismatch is found.",
    "functionName": "longestCommonPrefix",
    "boilerplate": "// Write your function here\nfunction longestCommonPrefix(strs) {\n  // Your code here\n}",
    "testCases": [
      { "args": [["flower", "flow", "flight"]], "expected": "fl" },
      { "args": [["dog", "racecar", "car"]], "expected": "" },
      {
        "args": [["interspecies", "interstellar", "interstate"]],
        "expected": "inters"
      },
      { "args": [["throne", "throne"]], "expected": "throne" },
      { "args": [["prefix", "preempt", "prepare"]], "expected": "pre" }
    ]
  },
  {
    "id": 15,
    "name": "Valid Parentheses",
    "difficulty": "Medium",
    "description": "Write a function named <code>validParentheses</code> that takes a string containing just the characters '(', ')', '{', '}', '[' and ']', and determines if the input string is valid. An input string is valid if:\n\n1. Open brackets are closed by the same type of brackets.\n2. Open brackets are closed in the correct order.",
    "hint": "Use a stack to keep track of opening brackets and ensure they are closed correctly.",
    "functionName": "validParentheses",
    "boilerplate": "// Write your function here\nfunction validParentheses(s) {\n  // Your code here\n}",
    "testCases": [
      { "args": ["()"], "expected": true },
      { "args": ["()[]{}"], "expected": true },
      { "args": ["(]"], "expected": false },
      { "args": ["([)]"], "expected": false },
      { "args": ["{[]}"], "expected": true }
    ]
  }
]
